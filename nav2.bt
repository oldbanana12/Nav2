LittleEndian();

#define COLOR_HEADER 0xBED655
#define COLOR_MANIFEST 0xD9FCAC

#define COLOR_NAVWORLD 0x4F54F0
#define COLOR_NAVWORLD_SS1 0x5F63F1
#define COLOR_NAVWORLD_SS2 0x6F73F2
#define COLOR_NAVWORLD_SS3 0x7F82F4
#define COLOR_NAVWORLD_SS4 0x8F92F5
#define COLOR_NAVWORLD_SS5 0x9FA1F6
#define COLOR_NAVWORLD_SS6 0xAFB1F8

#define COLOR_NAVMESHCHUNK 0xEBC05B
#define COLOR_NAVMESHCHUNK_SS1 0xECC569
#define COLOR_NAVMESHCHUNK_SS2 0xEECB78
#define COLOR_NAVMESHCHUNK_SS3 0xF0D187

#define COLOR_SEGMENTCHUNK 0xB844B7
#define COLOR_SEGMENTCHUNK_SS1 0xC979A3
#define COLOR_SEGMENTCHUNK_SS2 0xE3B9AD

#define COLOR_SEGMENTGRAPH 0x3DC59B
#define COLOR_SEGMENTGRAPH_SS1 0x4ECAA4
#define COLOR_SEGMENTGRAPH_SS2 0x60CFAD
#define COLOR_SEGMENTGRAPH_SS3 0x71D4B6

#define COLOR_SECTION2 0x6083FF

#define COLOR_NAVSYSTEM 0x894E00
#define COLOR_NAVSYSTEM_SS1 0xB58536
#define COLOR_NAVSYSTEM_SS2 0xE6AA89
#define COLOR_NAVSYSTEM_SS3 0xA080AC

typedef ubyte TWENTYFOURBITUINT[3] <read=TWENTYFOURBITUINTRead>;

string TWENTYFOURBITUINTRead( TWENTYFOURBITUINT n )
{
    string s;
    uint val = (uint)(n[0]) + (((uint)n[1]) << 8) + (((uint)n[2]) << 16);
    SPrintf( s, "%u", val);
    return s;
}

struct Vector3
{
    float x;
    float y;
    float z;
};

struct Vector4
{
    float x;
    float y;
    float z;
    float w;
};

struct Vertex {
    ushort x;
    ushort y;
    ushort z;
};

struct IndexPair8
{
    ubyte from;
    ubyte to;
};

enum <ushort> ENTRY_TYPE
{
    NAVWORLD = 0,
    NAVMESH_CHUNK = 1,
    NAVWORLD_SEGMENT_GRAPH = 3,
    SEGMENT_CHUNK = 4
};

enum <ubyte> ENTRY_TYPE_UINT8
{
    TYPE_NAVWORLD = 0,
    TYPE_NAVMESH_CHUNK = 1,
    TYPE_NAVWORLD_SEGMENT_GRAPH = 3,
    TYPE_SEGMENT_CHUNK = 4
};

struct Header
{
    uint magic;

    uint fileSize;
    uint endOfHeaderOffset;
    uint entryCount;
    uint navSystemOffset;
    ubyte fileIndex;    // 0 for .nav2, 1 for .1.nav2, etc

    // These 3 bytes relate to the tile origin of the .nav2 file
    // For example, with afgh:
    // u0a is 128 if the horizontal grid reference is odd
    // X Origin of .nav2 = (((u0b % 32) * 2) + (u0a / 128) - 32) * 128
    // Z Origin of .nav2 = (((u0c * 8) + ((u0b - (u0b % 32)) / 32) - 32) * 128
    ubyte u0a;
    ubyte u0b;
    ubyte u0c;
    
    uint section2Offset;
    uint o6; // Unknown, often 0
    Vector3 origin;

    uint section3Offset; // No idea what this section is, but this is definitely an offset (often 0)
    uint u1b; // Haven't seen this used, but possibly an offset too
    uint manifestOffset;
    uint manifestSize;
    
    uint u1c; // Unknown, often 0
    uint u1d; // Unknown, often 0

    ushort xDivisor;
    ushort yDivisor;
    ushort zDivisor;

    ushort u1h; // Unknown, often 127 (possibly a divisor for Vector4 values?)

    ubyte n7; // Unknown, often 1
    ubyte section2EntryCount;
    ushort n8; // Almost certainly padding (set to 0)

    hfloat vals[8]; // Unconvinced these are hfloats, but can't figure out what this is
} header <bgcolor=COLOR_HEADER>;

struct Manifest
{
    uint manifestEntryCount;

    struct ManifestEntry {

        struct ManifestSubEntry
        {
            ubyte groupId;          // A group is a set containing one of each entry type. This indicates which other entries this pairs with.
            ubyte u1b;
            ushort u2;
            uint payloadOffset;
            ENTRY_TYPE_UINT8 entryType;
            ushort entrySize;
            ubyte n4;
        } subentries[3];
    } manifest[manifestEntryCount];
}manifest<bgcolor=COLOR_MANIFEST>;

FSeek(header.endOfHeaderOffset);

struct NavWorld
{
    local long startPosition = FTell();

    // The subsection offsets are relative to the start of the NavWorld struct.
    uint subsection1Offset;
    Assert(subsection1Offset == 48);

    uint subsection2Offset;
    uint subsection4Offset;

    // These two are seemingly not read by the exe.
    uint subsection3Offset;
    uint u1;
    Assert(u1 == 0);

    uint u2;
    Assert(u2 == 0);

    // These two are seemingly not read by the exe.
    uint subsection5Offset;
    uint u3;
    Assert(u3 == 0);

    uint subsection6Offset;

    ushort numPoints;
    ushort numEdges;

    ushort probablyPadding1;
    ushort probablyPadding2;
    ushort probablyPadding3;
    Assert(probablyPadding1 == 0 && probablyPadding2 == 0 && probablyPadding3 == 0 );

    ushort numSubsection5Entries;

    FSeek(startPosition + subsection1Offset);
    struct NavWorldPoint
    {
        Vertex position;
    } points[numPoints]<bgcolor=COLOR_NAVWORLD_SS1>;

    FSeek(startPosition + subsection2Offset);
    struct NavWorldSubsection2
    {
        struct NavWorldSubsection2Entry
        {
            ushort NavWorldSubsection3Index;
            ushort subsection5Index;
            byte countA;
            byte countB;

        } entries[numPoints] <optimize=false>;
    } subsection2<bgcolor=COLOR_NAVWORLD_SS2, optimize=false>;

    FSeek(startPosition + subsection3Offset);

    struct NavWorldSubsection3
    {
        local int i;
        local int j;
        for (i = 0; i < numPoints; i++) 
        {
            FSeek (startPosition + subsection3Offset + (subsection2.entries[i].NavWorldSubsection3Index * 2));
            struct NavWorldSubsection3Entry
            {
                for (j = 0; j < subsection2.entries[i].countA; j++) {
                    ushort adjacentNode;
                    ushort edgeIndex;
                }

                for (j = 0; j < subsection2.entries[i].countB; j++) {
                    ushort u3;
                }
            } entries;
        }
    } subsection3<bgcolor=COLOR_NAVWORLD_SS3>;

    FSeek(startPosition + subsection4Offset);
    struct NavWorldEdge
    {
        ushort weight;
        ushort subsection5Index;

        IndexPair8 u3; // These are indicies into the points array but need to add the number of vertexes in previous "chunks"
    } edges[numEdges]<bgcolor=COLOR_NAVWORLD_SS4>;

    FSeek(startPosition + subsection5Offset);
    struct NavWorldSubsection5
    {
        struct NavWorldSubsection5Entry
        {
            ushort flags; // probably?
        } entries[numSubsection5Entries]; // This is the same as the number of "chunks" in the file
    } subsection5<bgcolor=COLOR_NAVWORLD_SS5>;

    FSeek(startPosition + subsection6Offset);
    struct NavWorldSubsection6
    {
        struct NavWorldSubsection6Entry
        {
            // Index into NavmeshChunk subsection 2.
            ushort navmeshSubsection2Index;
        } entries[numPoints];
    } subsection6<bgcolor=COLOR_NAVWORLD_SS6>;
};

struct NavmeshChunk
{
    local uint startPosition = FTell();

    uint subsection1Offset;
    Assert(subsection1Offset == 32);

    uint subsection2Offset;
    uint subsection3Offset;
    
    ushort uu1;
    ushort uu2;
    ushort uu3;
    ushort uu4;
    ushort uu5;
    ushort uu6;

    ushort numFaces;
    ushort numVertices;

    ushort u4;
    ushort u5;

    FSeek(startPosition + subsection1Offset);

    Vertex vertices[numVertices]<bgcolor=COLOR_NAVMESHCHUNK_SS1>;

    FSeek(startPosition + subsection2Offset);

    uint faceOffsets[numFaces]<bgcolor=COLOR_NAVMESHCHUNK_SS2>;

    FSeek(startPosition + subsection3Offset);

    struct NavmeshChunkFaces
    {
        local uint i = 0;
        for (i = 0; i < numFaces; i++) {
            FSeek(startPosition + subsection3Offset + (faceOffsets[i] & 0x3ffff) * 2);
            struct NavmeshChunkSubsection3Entry {
                if (faceOffsets[i] >> 0x12 & 1 > 0) {
                    short adjacentFaces[4];
                } else {
                    short adjacentFaces[3];
                }

                byte v1;
                byte v2;
                byte v3;
                if (faceOffsets[i] >> 0x12 & 1 > 0) {
                    byte v4;
                }

                if (faceOffsets[i] >> 0x12 & 1 > 0) {
                    byte edgeIndices[4];
                } else {
                    byte edgeIndices[3];
                }
            } entries;
        }
    } faces<bgcolor=COLOR_NAVMESHCHUNK_SS3>;
};

struct SegmentChunk
{
    local uint startPosition = FTell();

    uint subsection1Offset;
    Assert(subsection1Offset == 16);

    uint subsection2Offset;

    uint totalSize;
    uint entryCount;

    struct SegmentChunkSubsection1
    {
        struct SegmentChunkSubsection1Entry
        {
            Vertex a;
            Vertex b;
        } entries[entryCount];
    } subsection1<bgcolor=COLOR_SEGMENTCHUNK_SS1>;

    FSeek(startPosition + subsection2Offset);
    struct SegmentChunkSubsection2
    {
        struct SegmentChunkSubsection2Entry
        {
            short vertexIndexOffset;
            short navmeshChunkSubsection2EntryIndex;
            short u3;
            short u4;
            byte verts;
            byte faces;
            byte u7; // faces * 3 ?
            byte edges;
        } entries[entryCount];
    } subsection1<bgcolor=COLOR_SEGMENTCHUNK_SS2>;
};

struct NavWorldSegmentGraph
{
    local uint startPosition = FTell();

    uint subsection1Offset;
    Assert(subsection1Offset == 32);

    uint subsection2Offset;
    uint subsection3Offset;

    uint uu1;
    uint totalSize;     // Total size of the entry in bytes
    uint subsection1EntryCount;
    ushort uu3;
    uint totalEdges; // Probably?
    ushort padding;

    FSeek(startPosition + subsection1Offset);
    struct NavWorldSegmentGraphSubsection1
    {
        struct NavWorldSegmentGraphSubsection1Entry
        {
            Vertex position;
        } entries[subsection1EntryCount];
    } subsection1<bgcolor=COLOR_SEGMENTGRAPH_SS1>;

    FSeek(startPosition + subsection2Offset);
    struct NavWorldSegmentGraphSubsection2
    {
        struct NavWorldSegmentGraphSubsection2Entry
        {
            TWENTYFOURBITUINT subsection3Index;
            ubyte nEdges;
            short u3;
            ushort u4;
            byte u5;
            byte u6;
            byte offGroupEdges;
            byte offMeshEdges;
        } entries[subsection1EntryCount];
    } subsection2<bgcolor=COLOR_SEGMENTGRAPH_SS2>;

    if (subsection3Offset != totalSize)
    {
        FSeek(startPosition + subsection3Offset);

        struct NavWorldSegmentGraphSubsection3 {

            local int i = 0;
            local int j = 0;
            local int offset = 0;
            local TWENTYFOURBITUINT n;
            for (i = 0; i < subsection1EntryCount; i++) {
                n = subsection2.entries[i].subsection3Index;
                offset = (uint)(n[0]) + (((uint)n[1]) << 8) + (((uint)n[2]) << 16);
                FSeek (startPosition + subsection3Offset + offset*2);
                struct NavWorldSegmentGraphSubsection3Entry {
                    if (subsection2.entries[i].nEdges > 0) {
                        struct NavWorldSegmentType1Edges {
                            ushort weight;
                            ushort adjacentNode;
                            ubyte adjacentEdgeCount;
                            ubyte u1;
                        }type1Edges[subsection2.entries[i].nEdges];
                    }

                    if (subsection2.entries[i].offGroupEdges > 0) {
                        struct NavWorldSegmentType2Edges {
                            ushort groupId;
                            ushort weight;
                            ushort adjacentNode;
                            ubyte adjacentEdgeCount;
                            ubyte u5;
                        }type2Edges[subsection2.entries[i].offGroupEdges];
                    }

                    if (subsection2.entries[i].offMeshEdges > 0) {
                        struct NavWorldSegmentType3Edges {
                            ushort u1;
                            ushort groupId;
                            ushort adjacentNode;
                            ushort u4;
                            ubyte adjacentEdgeCount;
                            ubyte u6;
                        }type3Edges[subsection2.entries[i].offMeshEdges];
                    }

                    if (subsection2.entries[i].nEdges > 0) {
                        for (j = 0; j < subsection2.entries[i].nEdges; j++) {
                            struct NavWorldSegmentType1EdgeAdjacentEdges {
                                ubyte adjacentEdges[type1Edges[j].adjacentEdgeCount];
                            }type1AdjacentEdges;
                        }
                    }

                    if (subsection2.entries[i].offGroupEdges > 0) {
                        for (j = 0; j < subsection2.entries[i].offGroupEdges; j++) {
                            struct NavWorldSegmentType2EdgeAdjacentEdges {
                                ubyte adjacentEdges[type2Edges[j].adjacentEdgeCount];
                            }type2AdjacentEdges;
                        }
                    }

                    if (subsection2.entries[i].offMeshEdges > 0) {
                        for (j = 0; j < subsection2.entries[i].offMeshEdges; j++) {
                            struct NavWorldSegmentType3EdgeAdjacentEdges {
                                ubyte adjacentEdges[type3Edges[j].adjacentEdgeCount];
                            }type3AdjacentEdges;
                        }
                    }
                } entries;
            }
        }subsection3<bgcolor=COLOR_SEGMENTGRAPH_SS3>;
    }
};

struct Entry
{
    local long startOffset = FTell();

    ENTRY_TYPE entryType;    
    ushort u1;
    Assert(u1 == 0);

    uint nextEntryRelativeOffset;
    uint payloadRelativeOffset;
    ubyte groupId;
    ubyte u2;
    ushort n3;
    
    // TODO break if this is true
    // Assert((n1 & 0x7FFF) < 4);    
    switch(entryType)
    {
        case NAVWORLD:
            FSeek(startOffset + payloadRelativeOffset);
            NavWorld world <bgcolor=COLOR_NAVWORLD>;
            break;
        case NAVMESH_CHUNK:
            FSeek(startOffset + payloadRelativeOffset);
            NavmeshChunk chunk <bgcolor=COLOR_NAVMESHCHUNK>;
            break;
        case NAVWORLD_SEGMENT_GRAPH:
            FSeek(startOffset + payloadRelativeOffset);
            NavWorldSegmentGraph navWorldSegmentGraph <bgcolor=COLOR_SEGMENTGRAPH>;
            break;
        case SEGMENT_CHUNK:
            FSeek(startOffset + payloadRelativeOffset);
            SegmentChunk segmentChunk <bgcolor=COLOR_SEGMENTCHUNK>;
            break;
    };

    FSeek(startOffset + nextEntryRelativeOffset);
} entry[header.entryCount] <optimize = false, bgcolor=0x5B1ED8>;

if (header.section2Offset)
{
    FSeek(header.section2Offset);

    local long startOffset = 0;
    local int remainingEntries = header.section2EntryCount;
    do
    {
        startOffset = FTell();
        struct Section2Entry
        {
            ushort nextEntryRelativeOffset;
            ushort subsection1RelativeOffset;
            ushort subEntryCount;
            ushort subsection2RelativeOffset;
            ushort subsection3RelativeOffset;
            ushort subsection4RelativeOffset;
            ushort subsection5RelativeOffset;
            ushort subsection6RelativeOffset;

            FSeek(startOffset + subsection1RelativeOffset);
            struct Section2Subsection1
            {
                Vertex position;
                ubyte u1;
                ubyte u2;
                ushort subsection2Offset;
                ushort countB;
                ushort countA;
            } subsection1Entries[subEntryCount];

            FSeek(startOffset + subsection2RelativeOffset);

            local int i = 0;
            local int shorts;
            local int ints;
            struct Section2Subsection2 {
                for (i = 0; i < subEntryCount; i++) {
                    struct Section2Subsection2Entry {
                        if (subsection1Entries[i].countA > 0) {
                            struct AEntries {
                                ushort u1;
                                ushort u2;
                            } aEntries[subsection1Entries[i].countA];
                        }

                        if (subsection1Entries[i].countB > 0) {
                            struct BEntries {
                                ushort u3;
                            } bEntries[subsection1Entries[i].countB];
                        }
                    } entries;
                }
            } subsection2Entries;

            FSeek(startOffset + subsection3RelativeOffset);
            struct Section2Subsection3
            {
                ubyte u1;
                ubyte u2;
                ubyte u3;
                ubyte u4;
                ubyte u5;
                ubyte u6;
                ubyte u7;
                ubyte u8;
            } subsection3Entries[subEntryCount];

            FSeek(startOffset + subsection4RelativeOffset);
            struct Section2Subsection4
            {
                // Some kind of count or index. Not unique values.
                ushort n1;
            } subsection4Entries[subEntryCount];

            Assert (subsection6RelativeOffset - subsection5RelativeOffset == 24);

            struct Section2Subsection5
            {
                ubyte u1[24];
            } subsection5Entries;

            // TODO: Subsection 6?
        } section2Entry <bgcolor=COLOR_SECTION2>;

        FSeek(startOffset + section2Entry.nextEntryRelativeOffset);
        remainingEntries--;
    } while(remainingEntries != 0);
}

if (header.navSystemOffset != 0)
{
    FSeek(header.navSystemOffset);
    local long startPosition = FTell();
    struct NavSystem
    {
        local long startOffset = FTell();

        Vector4 u1;
        uint n1;
        uint n2;
        uint u3;
        uint divisor;
        uint n5;
        uint subsection1Offset;
        Assert(subsection1Offset == 48);

        uint subsection2Offset;
        uint subsection3Offset;

        FSeek(startOffset + subsection1Offset);
        struct NavSystemSubsection1
        {
            struct NavSystemSubsection1Entry
            {
                uint section2relativeOffset;
                ushort u1;
                ubyte u2;
                ubyte u3;
            } entries[n1*u3];
        } subsection1<bgcolor=COLOR_NAVSYSTEM_SS1>;

        FSeek(startOffset + subsection2Offset);
        local int i = subsection2Offset;
        local int64 curPos;
        struct NavSystemSubsection2
        {
            while (i < subsection3Offset) {
                curPos = FTell();
                if (FSeek (curPos + 8) == -1) {
                    break;
                } else {
                    FSeek(curPos);
                }

                struct NavSystemSubsection2Entry
                {
                    byte groupId;
                    byte u1;
                    ushort u2;
                    uint count;
                    i += (8 + (count * 2));
                    ushort vals[count];
                } entries;
            }
        } subsection2<bgcolor=COLOR_NAVSYSTEM_SS2>;
    } navSystem <bgcolor=COLOR_NAVSYSTEM>;
}